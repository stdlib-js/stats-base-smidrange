{"version":3,"file":"index.mjs","sources":["../lib/smidrange.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Computes the mid-range of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} mid-range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = smidrange( x.length, x, 1 );\n* // returns 0.0\n*/\nfunction smidrange( N, x, stride ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( float64ToFloat32( max+min ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default smidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Computes the mid-range of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} mid-range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smidrange( N, x, 2, 1 );\n* // returns 1.0\n*/\nfunction smidrange( N, x, stride, offset ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( float64ToFloat32( max+min ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default smidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport smidrange from './smidrange.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( smidrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smidrange;\n"],"names":["smidrange","N","x","stride","max","min","ix","v","i","NaN","isnanf","isNegativeZerof","isPositiveZerof","float64ToFloat32","offset","setReadOnly","ndarray"],"mappings":";;2fA8CA,SAASA,EAAWC,EAAGC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAG,GASX,IADAE,EADAC,EAAMH,EAJLI,EADIH,EAAS,GACP,EAAEF,GAAKE,EAER,GAIAK,EAAI,EAAGA,EAAIP,EAAGO,IAAM,CAGzB,GADAD,EAAIL,EADJI,GAAMH,GAEDO,EAAQH,GACZ,OAAOA,EAEHA,EAAIF,GAASE,IAAMF,GAAOM,EAAiBJ,GAC/CF,EAAME,GACKA,EAAIH,GAASG,IAAMH,GAAOQ,EAAiBL,MACtDH,EAAMG,GAGR,OAAOM,EAAkBA,EAAkBT,EAAIC,GAAQ,GC7BxD,SAASL,EAAWC,EAAGC,EAAGC,EAAQW,GACjC,IAAIV,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAGY,GAKX,IADAV,EADAC,EAAMH,EADNI,EAAKQ,GAGCN,EAAI,EAAGA,EAAIP,EAAGO,IAAM,CAGzB,GADAD,EAAIL,EADJI,GAAMH,GAEDO,EAAQH,GACZ,OAAOA,EAEHA,EAAIF,GAASE,IAAMF,GAAOM,EAAiBJ,GAC/CF,EAAME,GACKA,EAAIH,GAASG,IAAMH,GAAOQ,EAAiBL,MACtDH,EAAMG,GAGR,OAAOM,EAAkBA,EAAkBT,EAAIC,GAAQ,GChDxDU,EAAAf,EAAA,UAAAgB"}